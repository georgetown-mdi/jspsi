/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PsiRouteImport } from './routes/psi'
import { Route as IndexRouteImport } from './routes/index'
import { Route as V2IndexRouteImport } from './routes/v2/index'
import { Route as ApiPeerjsIndexRouteImport } from './routes/api/peerjs/index'
import { Route as ApiPsiJoinRouteImport } from './routes/api/psi/join'
import { Route as ApiPsiCreateRouteImport } from './routes/api/psi/create'
import { Route as ApiPeerjsIdRouteImport } from './routes/api/peerjs/id'
import { Route as ApiPsiUuidIndexRouteImport } from './routes/api/psi/$uuid/index'
import { Route as ApiPsiUuidWaitRouteImport } from './routes/api/psi/$uuid/wait'
import { Route as ApiPeerjsKeyPeersRouteImport } from './routes/api/peerjs/$key/peers'

const PsiRoute = PsiRouteImport.update({
  id: '/psi',
  path: '/psi',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const V2IndexRoute = V2IndexRouteImport.update({
  id: '/v2/',
  path: '/v2/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPeerjsIndexRoute = ApiPeerjsIndexRouteImport.update({
  id: '/api/peerjs/',
  path: '/api/peerjs/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPsiJoinRoute = ApiPsiJoinRouteImport.update({
  id: '/api/psi/join',
  path: '/api/psi/join',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPsiCreateRoute = ApiPsiCreateRouteImport.update({
  id: '/api/psi/create',
  path: '/api/psi/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPeerjsIdRoute = ApiPeerjsIdRouteImport.update({
  id: '/api/peerjs/id',
  path: '/api/peerjs/id',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPsiUuidIndexRoute = ApiPsiUuidIndexRouteImport.update({
  id: '/api/psi/$uuid/',
  path: '/api/psi/$uuid/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPsiUuidWaitRoute = ApiPsiUuidWaitRouteImport.update({
  id: '/api/psi/$uuid/wait',
  path: '/api/psi/$uuid/wait',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPeerjsKeyPeersRoute = ApiPeerjsKeyPeersRouteImport.update({
  id: '/api/peerjs/$key/peers',
  path: '/api/peerjs/$key/peers',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2': typeof V2IndexRoute
  '/api/peerjs/id': typeof ApiPeerjsIdRoute
  '/api/psi/create': typeof ApiPsiCreateRoute
  '/api/psi/join': typeof ApiPsiJoinRoute
  '/api/peerjs': typeof ApiPeerjsIndexRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitRoute
  '/api/psi/$uuid': typeof ApiPsiUuidIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2': typeof V2IndexRoute
  '/api/peerjs/id': typeof ApiPeerjsIdRoute
  '/api/psi/create': typeof ApiPsiCreateRoute
  '/api/psi/join': typeof ApiPsiJoinRoute
  '/api/peerjs': typeof ApiPeerjsIndexRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitRoute
  '/api/psi/$uuid': typeof ApiPsiUuidIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2/': typeof V2IndexRoute
  '/api/peerjs/id': typeof ApiPeerjsIdRoute
  '/api/psi/create': typeof ApiPsiCreateRoute
  '/api/psi/join': typeof ApiPsiJoinRoute
  '/api/peerjs/': typeof ApiPeerjsIndexRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitRoute
  '/api/psi/$uuid/': typeof ApiPsiUuidIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/psi'
    | '/v2'
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/psi'
    | '/v2'
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid'
  id:
    | '__root__'
    | '/'
    | '/psi'
    | '/v2/'
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs/'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PsiRoute: typeof PsiRoute
  V2IndexRoute: typeof V2IndexRoute
  ApiPeerjsIdRoute: typeof ApiPeerjsIdRoute
  ApiPsiCreateRoute: typeof ApiPsiCreateRoute
  ApiPsiJoinRoute: typeof ApiPsiJoinRoute
  ApiPeerjsIndexRoute: typeof ApiPeerjsIndexRoute
  ApiPeerjsKeyPeersRoute: typeof ApiPeerjsKeyPeersRoute
  ApiPsiUuidWaitRoute: typeof ApiPsiUuidWaitRoute
  ApiPsiUuidIndexRoute: typeof ApiPsiUuidIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/psi': {
      id: '/psi'
      path: '/psi'
      fullPath: '/psi'
      preLoaderRoute: typeof PsiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/v2/': {
      id: '/v2/'
      path: '/v2'
      fullPath: '/v2'
      preLoaderRoute: typeof V2IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/peerjs/': {
      id: '/api/peerjs/'
      path: '/api/peerjs'
      fullPath: '/api/peerjs'
      preLoaderRoute: typeof ApiPeerjsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/psi/join': {
      id: '/api/psi/join'
      path: '/api/psi/join'
      fullPath: '/api/psi/join'
      preLoaderRoute: typeof ApiPsiJoinRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/psi/create': {
      id: '/api/psi/create'
      path: '/api/psi/create'
      fullPath: '/api/psi/create'
      preLoaderRoute: typeof ApiPsiCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/peerjs/id': {
      id: '/api/peerjs/id'
      path: '/api/peerjs/id'
      fullPath: '/api/peerjs/id'
      preLoaderRoute: typeof ApiPeerjsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/psi/$uuid/': {
      id: '/api/psi/$uuid/'
      path: '/api/psi/$uuid'
      fullPath: '/api/psi/$uuid'
      preLoaderRoute: typeof ApiPsiUuidIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/psi/$uuid/wait': {
      id: '/api/psi/$uuid/wait'
      path: '/api/psi/$uuid/wait'
      fullPath: '/api/psi/$uuid/wait'
      preLoaderRoute: typeof ApiPsiUuidWaitRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/peerjs/$key/peers': {
      id: '/api/peerjs/$key/peers'
      path: '/api/peerjs/$key/peers'
      fullPath: '/api/peerjs/$key/peers'
      preLoaderRoute: typeof ApiPeerjsKeyPeersRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PsiRoute: PsiRoute,
  V2IndexRoute: V2IndexRoute,
  ApiPeerjsIdRoute: ApiPeerjsIdRoute,
  ApiPsiCreateRoute: ApiPsiCreateRoute,
  ApiPsiJoinRoute: ApiPsiJoinRoute,
  ApiPeerjsIndexRoute: ApiPeerjsIndexRoute,
  ApiPeerjsKeyPeersRoute: ApiPeerjsKeyPeersRoute,
  ApiPsiUuidWaitRoute: ApiPsiUuidWaitRoute,
  ApiPsiUuidIndexRoute: ApiPsiUuidIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
