/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as PsiRouteImport } from './routes/psi'
import { Route as IndexRouteImport } from './routes/index'
import { Route as V2IndexRouteImport } from './routes/v2/index'
import { ServerRoute as ApiPeerjsIndexServerRouteImport } from './routes/api/peerjs/index'
import { ServerRoute as ApiPsiJoinServerRouteImport } from './routes/api/psi/join'
import { ServerRoute as ApiPsiCreateServerRouteImport } from './routes/api/psi/create'
import { ServerRoute as ApiPeerjsIdServerRouteImport } from './routes/api/peerjs/id'
import { ServerRoute as ApiPsiUuidIndexServerRouteImport } from './routes/api/psi/$uuid/index'
import { ServerRoute as ApiPsiUuidWaitServerRouteImport } from './routes/api/psi/$uuid/wait'
import { ServerRoute as ApiPeerjsKeyPeersServerRouteImport } from './routes/api/peerjs/$key/peers'

const rootServerRouteImport = createServerRootRoute()

const PsiRoute = PsiRouteImport.update({
  id: '/psi',
  path: '/psi',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const V2IndexRoute = V2IndexRouteImport.update({
  id: '/v2/',
  path: '/v2/',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiPeerjsIndexServerRoute = ApiPeerjsIndexServerRouteImport.update({
  id: '/api/peerjs/',
  path: '/api/peerjs/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPsiJoinServerRoute = ApiPsiJoinServerRouteImport.update({
  id: '/api/psi/join',
  path: '/api/psi/join',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPsiCreateServerRoute = ApiPsiCreateServerRouteImport.update({
  id: '/api/psi/create',
  path: '/api/psi/create',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPeerjsIdServerRoute = ApiPeerjsIdServerRouteImport.update({
  id: '/api/peerjs/id',
  path: '/api/peerjs/id',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPsiUuidIndexServerRoute = ApiPsiUuidIndexServerRouteImport.update({
  id: '/api/psi/$uuid/',
  path: '/api/psi/$uuid/',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPsiUuidWaitServerRoute = ApiPsiUuidWaitServerRouteImport.update({
  id: '/api/psi/$uuid/wait',
  path: '/api/psi/$uuid/wait',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiPeerjsKeyPeersServerRoute = ApiPeerjsKeyPeersServerRouteImport.update({
  id: '/api/peerjs/$key/peers',
  path: '/api/peerjs/$key/peers',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2': typeof V2IndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2': typeof V2IndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/psi': typeof PsiRoute
  '/v2/': typeof V2IndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/psi' | '/v2'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/psi' | '/v2'
  id: '__root__' | '/' | '/psi' | '/v2/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PsiRoute: typeof PsiRoute
  V2IndexRoute: typeof V2IndexRoute
}
export interface FileServerRoutesByFullPath {
  '/api/peerjs/id': typeof ApiPeerjsIdServerRoute
  '/api/psi/create': typeof ApiPsiCreateServerRoute
  '/api/psi/join': typeof ApiPsiJoinServerRoute
  '/api/peerjs': typeof ApiPeerjsIndexServerRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersServerRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitServerRoute
  '/api/psi/$uuid': typeof ApiPsiUuidIndexServerRoute
}
export interface FileServerRoutesByTo {
  '/api/peerjs/id': typeof ApiPeerjsIdServerRoute
  '/api/psi/create': typeof ApiPsiCreateServerRoute
  '/api/psi/join': typeof ApiPsiJoinServerRoute
  '/api/peerjs': typeof ApiPeerjsIndexServerRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersServerRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitServerRoute
  '/api/psi/$uuid': typeof ApiPsiUuidIndexServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/peerjs/id': typeof ApiPeerjsIdServerRoute
  '/api/psi/create': typeof ApiPsiCreateServerRoute
  '/api/psi/join': typeof ApiPsiJoinServerRoute
  '/api/peerjs/': typeof ApiPeerjsIndexServerRoute
  '/api/peerjs/$key/peers': typeof ApiPeerjsKeyPeersServerRoute
  '/api/psi/$uuid/wait': typeof ApiPsiUuidWaitServerRoute
  '/api/psi/$uuid/': typeof ApiPsiUuidIndexServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid'
  id:
    | '__root__'
    | '/api/peerjs/id'
    | '/api/psi/create'
    | '/api/psi/join'
    | '/api/peerjs/'
    | '/api/peerjs/$key/peers'
    | '/api/psi/$uuid/wait'
    | '/api/psi/$uuid/'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiPeerjsIdServerRoute: typeof ApiPeerjsIdServerRoute
  ApiPsiCreateServerRoute: typeof ApiPsiCreateServerRoute
  ApiPsiJoinServerRoute: typeof ApiPsiJoinServerRoute
  ApiPeerjsIndexServerRoute: typeof ApiPeerjsIndexServerRoute
  ApiPeerjsKeyPeersServerRoute: typeof ApiPeerjsKeyPeersServerRoute
  ApiPsiUuidWaitServerRoute: typeof ApiPsiUuidWaitServerRoute
  ApiPsiUuidIndexServerRoute: typeof ApiPsiUuidIndexServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/psi': {
      id: '/psi'
      path: '/psi'
      fullPath: '/psi'
      preLoaderRoute: typeof PsiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/v2/': {
      id: '/v2/'
      path: '/v2'
      fullPath: '/v2'
      preLoaderRoute: typeof V2IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/peerjs/': {
      id: '/api/peerjs/'
      path: '/api/peerjs'
      fullPath: '/api/peerjs'
      preLoaderRoute: typeof ApiPeerjsIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/psi/join': {
      id: '/api/psi/join'
      path: '/api/psi/join'
      fullPath: '/api/psi/join'
      preLoaderRoute: typeof ApiPsiJoinServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/psi/create': {
      id: '/api/psi/create'
      path: '/api/psi/create'
      fullPath: '/api/psi/create'
      preLoaderRoute: typeof ApiPsiCreateServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/peerjs/id': {
      id: '/api/peerjs/id'
      path: '/api/peerjs/id'
      fullPath: '/api/peerjs/id'
      preLoaderRoute: typeof ApiPeerjsIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/psi/$uuid/': {
      id: '/api/psi/$uuid/'
      path: '/api/psi/$uuid'
      fullPath: '/api/psi/$uuid'
      preLoaderRoute: typeof ApiPsiUuidIndexServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/psi/$uuid/wait': {
      id: '/api/psi/$uuid/wait'
      path: '/api/psi/$uuid/wait'
      fullPath: '/api/psi/$uuid/wait'
      preLoaderRoute: typeof ApiPsiUuidWaitServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/peerjs/$key/peers': {
      id: '/api/peerjs/$key/peers'
      path: '/api/peerjs/$key/peers'
      fullPath: '/api/peerjs/$key/peers'
      preLoaderRoute: typeof ApiPeerjsKeyPeersServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PsiRoute: PsiRoute,
  V2IndexRoute: V2IndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiPeerjsIdServerRoute: ApiPeerjsIdServerRoute,
  ApiPsiCreateServerRoute: ApiPsiCreateServerRoute,
  ApiPsiJoinServerRoute: ApiPsiJoinServerRoute,
  ApiPeerjsIndexServerRoute: ApiPeerjsIndexServerRoute,
  ApiPeerjsKeyPeersServerRoute: ApiPeerjsKeyPeersServerRoute,
  ApiPsiUuidWaitServerRoute: ApiPsiUuidWaitServerRoute,
  ApiPsiUuidIndexServerRoute: ApiPsiUuidIndexServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
